# Generated by Django 5.0.12 on 2025-04-22 11:43

import django.core.validators
import django.db.models.deletion
import django_extensions.db.fields
import farmyard_manager.core.fields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('entrance', '0001_initial'),
        ('payments', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ReEntryItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('item_type', models.CharField(choices=[('public', 'Public'), ('group', 'Group'), ('school', 'School'), ('online', 'Online'), ('voided', 'VOIDED')], max_length=50)),
                ('visitor_count', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('applied_price', models.DecimalField(decimal_places=2, max_digits=10)),
            ],
            options={
                'db_table': 'entrance_re_entry_items',
            },
        ),
        migrations.CreateModel(
            name='ReEntryItemEditHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('field', models.CharField(choices=[('item_type', 'Item Type'), ('visitor_count', 'Visitor Count')], db_index=True, max_length=50)),
                ('prev_value', models.CharField(max_length=255)),
                ('new_value', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'entrance_re_entry_item_edit_history',
            },
        ),
        migrations.CreateModel(
            name='ReEntryStatusHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('prev_status', models.CharField(blank=True, choices=[('pending', 'Pending'), ('pending_payment', 'Pending Payment'), ('processed', 'Processed')], db_index=True, max_length=50)),
                ('new_status', models.CharField(choices=[('pending', 'Pending'), ('pending_payment', 'Pending Payment'), ('processed', 'Processed')], db_index=True, max_length=50)),
            ],
            options={
                'db_table': 'entrance_re_entry_status_history',
            },
        ),
        migrations.CreateModel(
            name='TicketItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('is_removed', models.BooleanField(default=False)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('item_type', models.CharField(choices=[('public', 'Public'), ('group', 'Group'), ('school', 'School'), ('online', 'Online'), ('voided', 'VOIDED')], max_length=50)),
                ('visitor_count', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('applied_price', models.DecimalField(decimal_places=2, max_digits=10)),
            ],
            options={
                'db_table': 'entrance_ticket_items',
            },
        ),
        migrations.CreateModel(
            name='TicketItemEditHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('field', models.CharField(choices=[('item_type', 'Item Type'), ('visitor_count', 'Visitor Count')], db_index=True, max_length=50)),
                ('prev_value', models.CharField(max_length=255)),
                ('new_value', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'entrance_ticket_item_edit_history',
            },
        ),
        migrations.CreateModel(
            name='TicketStatusHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('prev_status', models.CharField(blank=True, choices=[('pending_security', 'Pending Security'), ('passed_security', 'Passed Security'), ('counted', 'Visitors Counted'), ('processed', 'Processed'), ('refunded', 'Ticket Refunded')], db_index=True, max_length=50)),
                ('new_status', models.CharField(choices=[('pending_security', 'Pending Security'), ('passed_security', 'Passed Security'), ('counted', 'Visitors Counted'), ('processed', 'Processed'), ('refunded', 'Ticket Refunded')], db_index=True, max_length=50)),
            ],
            options={
                'db_table': 'entrance_ticket_status_history',
            },
        ),
        migrations.RemoveField(
            model_name='edithistory',
            name='performed_by',
        ),
        migrations.RemoveField(
            model_name='edithistory',
            name='ticket',
        ),
        migrations.RemoveField(
            model_name='reentryaddition',
            name='payment',
        ),
        migrations.RemoveField(
            model_name='reentryaddition',
            name='re_entry',
        ),
        migrations.RemoveField(
            model_name='reentryaddition',
            name='ticket',
        ),
        migrations.RemoveField(
            model_name='statushistory',
            name='performed_by',
        ),
        migrations.RemoveField(
            model_name='statushistory',
            name='ticket',
        ),
        migrations.RenameField(
            model_name='pricing',
            old_name='applies_to',
            new_name='price_end',
        ),
        migrations.RenameField(
            model_name='pricing',
            old_name='applies_from',
            new_name='price_start',
        ),
        migrations.RemoveField(
            model_name='pricing',
            name='ticket_type',
        ),
        migrations.RemoveField(
            model_name='reentry',
            name='completed_by',
        ),
        migrations.RemoveField(
            model_name='reentry',
            name='created_by',
        ),
        migrations.RemoveField(
            model_name='ticket',
            name='applied_price',
        ),
        migrations.RemoveField(
            model_name='ticket',
            name='ticket_number',
        ),
        migrations.RemoveField(
            model_name='ticket',
            name='type',
        ),
        migrations.RemoveField(
            model_name='ticket',
            name='visitor_count',
        ),
        migrations.AddField(
            model_name='pricing',
            name='ticket_item_type',
            field=models.CharField(choices=[('public', 'Public'), ('group', 'Group'), ('school', 'School'), ('online', 'Online'), ('voided', 'VOIDED')], db_index=True, default='public', max_length=50),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='reentry',
            name='is_removed',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='reentry',
            name='payment',
            field=farmyard_manager.core.fields.SnakeCaseFK(null=True, on_delete=django.db.models.deletion.PROTECT, to='payments.payment'),
        ),
        migrations.AddField(
            model_name='reentry',
            name='ref_number',
            field=models.CharField(blank=True, max_length=255, unique=True),
        ),
        migrations.AddField(
            model_name='ticket',
            name='ref_number',
            field=models.CharField(blank=True, max_length=255, unique=True),
        ),
        migrations.AlterField(
            model_name='reentry',
            name='status',
            field=models.CharField(choices=[('pending', 'Pending'), ('pending_payment', 'Pending Payment'), ('processed', 'Processed')], db_index=True, default='pending', max_length=50),
        ),
        migrations.AlterField(
            model_name='ticket',
            name='payment',
            field=farmyard_manager.core.fields.SnakeCaseFK(null=True, on_delete=django.db.models.deletion.PROTECT, to='payments.payment'),
        ),
        migrations.AlterField(
            model_name='ticket',
            name='status',
            field=models.CharField(choices=[('pending_security', 'Pending Security'), ('passed_security', 'Passed Security'), ('counted', 'Visitors Counted'), ('processed', 'Processed'), ('refunded', 'Ticket Refunded')], max_length=255),
        ),
        migrations.AddConstraint(
            model_name='pricing',
            constraint=models.UniqueConstraint(condition=models.Q(('is_active', True)), fields=('ticket_item_type', 'is_active'), name='unique_active_pricing_per_type'),
        ),
        migrations.AddField(
            model_name='reentryitem',
            name='created_by',
            field=farmyard_manager.core.fields.SnakeCaseFK(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='reentryitem',
            name='re_entry',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='re_entry_items', to='entrance.reentry'),
        ),
        migrations.AddField(
            model_name='reentryitemedithistory',
            name='performed_by',
            field=farmyard_manager.core.fields.SnakeCaseFK(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='reentryitemedithistory',
            name='re_entry_item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='edit_history', to='entrance.reentryitem'),
        ),
        migrations.AddField(
            model_name='reentrystatushistory',
            name='performed_by',
            field=farmyard_manager.core.fields.SnakeCaseFK(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='reentrystatushistory',
            name='re_entry',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='status_history', to='entrance.reentry'),
        ),
        migrations.AddField(
            model_name='ticketitem',
            name='created_by',
            field=farmyard_manager.core.fields.SnakeCaseFK(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='ticketitem',
            name='ticket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ticket_items', to='entrance.ticket'),
        ),
        migrations.AddField(
            model_name='ticketitemedithistory',
            name='performed_by',
            field=farmyard_manager.core.fields.SnakeCaseFK(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='ticketitemedithistory',
            name='ticket_item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='edit_history', to='entrance.ticketitem'),
        ),
        migrations.AddField(
            model_name='ticketstatushistory',
            name='performed_by',
            field=farmyard_manager.core.fields.SnakeCaseFK(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='ticketstatushistory',
            name='ticket',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='status_history', to='entrance.ticket'),
        ),
        migrations.DeleteModel(
            name='EditHistory',
        ),
        migrations.DeleteModel(
            name='ReEntryAddition',
        ),
        migrations.DeleteModel(
            name='StatusHistory',
        ),
    ]
